"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngTable"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||["angularMoment","angular-capitalize-filter","ngSanitize"]).constant("_",window._),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return"guest"===role||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("equivalents"),app.registerModule("equivalents.services")}(ApplicationConfiguration),function(app){app.registerModule("idioms"),app.registerModule("idioms.services"),app.registerModule("idioms.routes",["ui.router","idioms.services"])}(ApplicationConfiguration),function(app){app.registerModule("translations"),app.registerModule("translations.services")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("index",{url:"/",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("home",{url:"/home",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("customConfirmation",["$modal",function($modal){var ModalInstanceCtrl=function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}};return ModalInstanceCtrl.$inject=["$scope","$modalInstance"],{restrict:"A",scope:{customConfirmation:"&"},link:function(scope,element,attrs){element.bind("click",function(){var message=attrs.customMessage||"Are you sure?",modalHtml='<div class="modal-header"><h4 class="modal-title">Confirmation</h4></div>';modalHtml+='<div class="modal-body">'+message+"</div>",modalHtml+='<div class="modal-footer"><button class="btn btn-success" ng-click="ok()">Yes</button><button class="btn btn-danger" ng-click="cancel()">No</button></div>';var modalInstance=$modal.open({template:modalHtml,controller:ModalInstanceCtrl});modalInstance.result.then(function(){scope.customConfirmation()},function(){})})}}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector","Authentication",function($q,$injector,Authentication){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function EquivalentsService($resource){return $resource("api/equivalents/:equivalentId",{equivalentId:"@id"},{update:{method:"PUT"}},{get:{method:"GET",isArray:!0}})}function EquivalentsByIdiomService($resource){return $resource("api/getEquivalentsByIdiom/:idiomId",{idiomId:"@idiomId"},{update:{method:"PUT"}},{get:{method:"GET",isArray:!0}})}angular.module("equivalents.services").factory("EquivalentsService",EquivalentsService).factory("EquivalentsByIdiomService",EquivalentsByIdiomService),EquivalentsService.$inject=["$resource"],EquivalentsByIdiomService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Idioms",state:"idioms",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","idioms",{title:"List Idioms",state:"idioms.list"}),Menus.addSubMenuItem("topbar","idioms",{title:"Create Idiom",state:"idioms.create",roles:["user","admin"]})}angular.module("idioms").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("idioms",{"abstract":!0,url:"/idioms",template:"<ui-view/>"}).state("idioms.list",{url:"",templateUrl:"modules/idioms/client/views/list-idioms.client.view.html",controller:"IdiomsListController",controllerAs:"vm"}).state("idioms.create",{url:"/create",templateUrl:"modules/idioms/client/views/form-idiom.client.view.html",controller:"IdiomsController",controllerAs:"vm",resolve:{idiomResolve:newIdiom,newTranslationResolve:newTranslation,newEquivalentResolve:newEquivalent,getTranslationResolve:getTranslation,getEquivalentResolve:getEquivalent},data:{roles:["user","admin"]}}).state("idioms.edit",{url:"/:idiomId/edit",templateUrl:"modules/idioms/client/views/form-idiom.client.view.html",controller:"IdiomsController",controllerAs:"vm",resolve:{idiomResolve:getIdiom,newTranslationResolve:newTranslation,newEquivalentResolve:newEquivalent,getTranslationResolve:getTranslation,getEquivalentResolve:getEquivalent},data:{roles:["user","admin"]}})}function getIdiom($stateParams,IdiomsService){return IdiomsService.get({idiomId:$stateParams.idiomId}).$promise}function getTranslation($stateParams,TranslationsService,TranslationsByIdiomService){return $stateParams.idiomId?TranslationsByIdiomService.query({idiomId:$stateParams.idiomId}).$promise:new TranslationsService}function getEquivalent($stateParams,EquivalentsService,EquivalentsByIdiomService){return $stateParams.idiomId?EquivalentsByIdiomService.query({idiomId:$stateParams.idiomId}).$promise:new EquivalentsService}function newIdiom(IdiomsService){return new IdiomsService}function newTranslation(TranslationsService){return new TranslationsService}function newEquivalent(EquivalentsService){return new EquivalentsService}angular.module("idioms.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getIdiom.$inject=["$stateParams","IdiomsService"],getTranslation.$inject=["$stateParams","TranslationsService","TranslationsByIdiomService"],getEquivalent.$inject=["$stateParams","EquivalentsService","EquivalentsByIdiomService"],newIdiom.$inject=["IdiomsService"],newTranslation.$inject=["TranslationsService"],newEquivalent.$inject=["EquivalentsService"]}(),function(){function IdiomsController($http,$scope,$timeout,$window,$state,idiom,translation,equivalent,getTranslationResolve,getEquivalentResolve,Authentication,FileUploader,TranslationsService,TranslationsByIdiomService,EquivalentsService,EquivalentsByIdiomService){function remove(){vm.idiom.$remove($state.go("idioms.create"))}function newIdiom(){$state.reload()}function save(isValid){function successCallback(res){console.log("success add idiom with id: "+res.id)}function errorCallback(res){vm.error=res.data.message}return isValid?(vm.idiom.language=vm.selectedLang.lang,void(vm.idiom.id?vm.idiom.$update(successCallback,errorCallback):vm.idiom.$save(successCallback,errorCallback))):($scope.$broadcast("show-errors-check-validity","vm.form.idiomForm"),!1)}function getTranslation(){TranslationsByIdiomService.query({idiomId:vm.idiom.id}).$promise.then(function(res){vm.translationsByIdiom=res},function(res){vm.errorTranslation=res.data.message})}function saveTranslation(isValid){function successCallback(res){console.log("success add 121 translation with id: "+res.id),vm.translation.id="",vm.translationRequired=!1,getTranslation()}function errorCallback(res){vm.errorTranslation=res.data.message}return vm.translation.translation?(vm.translation.language=vm.selectedTranslationLang.lang,vm.translation.idiomId=vm.idiom.id,void vm.translation.$save(successCallback,errorCallback)):(vm.translationRequired=!0,!1)}function removeTranslation(translationId){TranslationsService["delete"]({translationId:translationId}).$promise.then(function(res){console.log("success delete 121 Translations"),getTranslation()},function(res){console.log("error delete 121 Translations"),vm.errorTranslation=res.data.message})}function getEquivalent(){EquivalentsByIdiomService.query({idiomId:vm.idiom.id}).$promise.then(function(res){vm.equivalentsByIdiom=res},function(res){vm.errorEquivalent=res.data.message})}function saveEquivalent(isValid){function successCallback(res){console.log("success add equivalent translation with id: "+res.id),vm.equivalent.id="",vm.equivalentRequired=!1,getEquivalent()}function errorCallback(res){vm.errorEquivalent=res.data.message}return vm.equivalent.equiv_idiom?(vm.equivalent.language=vm.selectedEquivalentLang.lang,vm.equivalent.idiomId=vm.idiom.id,void vm.equivalent.$save(successCallback,errorCallback)):(vm.equivalentRequired=!0,!1)}function removeEquivalent(equivalentId){EquivalentsService["delete"]({equivalentId:equivalentId}).$promise.then(function(res){console.log("success delete equivalent Translations"),getEquivalent()},function(res){console.log("error delete equivalent Translations"),vm.errorEquivalent=res.data.message})}var vm=this;vm.idiom=idiom,vm.translation=translation,vm.equivalent=equivalent,vm.authentication=Authentication,vm.error=null,vm.errorEquivalent=null,vm.errorTranslation=null,vm.form={},vm.remove=remove,vm.save=save,vm.saveTranslation=saveTranslation,vm.saveEquivalent=saveEquivalent,vm.translationRequired=!1,vm.equivalentRequired=!1,console.log("getTranslation: "+JSON.stringify(getTranslationResolve)),console.log("getEquivalent: "+JSON.stringify(getEquivalentResolve)),vm.translationsByIdiom=getTranslationResolve,vm.equivalentsByIdiom=getEquivalentResolve,vm.languages=[{id:"1",lang:"DE"},{id:"2",lang:"EN"},{id:"3",lang:"ES"},{id:"4",lang:"IT"}],vm.selectedLang={id:"1",lang:"DE"},vm.selectedTranslationLang={id:"2",lang:"EN"},vm.selectedEquivalentLang={id:"2",lang:"EN"},$scope.remove=function(){remove()},$scope.newIdiom=function(){newIdiom()},vm.idiom.imageURL?vm.imageURL=vm.idiom.imageURL:vm.imageURL="modules/idioms/client/img/no-image.png",vm.uploader=new FileUploader({url:"api/idioms/picture",alias:"newPicture"}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),vm.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){vm.imageURL=fileReaderEvent.target.result},0)}}},vm.uploader.onSuccessItem=function(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,vm.cancelUpload()},vm.uploader.onErrorItem=function(fileItem,response,status,headers){vm.cancelUpload(),vm.error=response.message},vm.uploadProfilePicture=function(){vm.success=$scope.error=null,vm.uploader.queue[0].formData.push({idiomId:vm.idiom.id}),vm.uploader.uploadAll()},vm.cancelUpload=function(){vm.uploader.clearQueue(),vm.imageURL=vm.idiom.imageURL},$scope.removeTranslation=function(translationId){removeTranslation(translationId)},$scope.removeEquivalent=function(equivalentId){removeEquivalent(equivalentId)}}angular.module("idioms").controller("IdiomsController",IdiomsController),IdiomsController.$inject=["$http","$scope","$timeout","$window","$state","idiomResolve","newTranslationResolve","newEquivalentResolve","getTranslationResolve","getEquivalentResolve","Authentication","FileUploader","TranslationsService","TranslationsByIdiomService","EquivalentsService","EquivalentsByIdiomService"]}(),angular.module("idioms").controller("IdiomsListController",["$scope","$filter","$state","IdiomsService","NgTableParams",function($scope,$filter,$state,IdiomsService,NgTableParams){function remove(id){IdiomsService["delete"]({idiomId:id}).$promise.then(function(res){console.log("success delete idiom id: "+id),$state.reload()},function(res){console.log("error delete idiom id: "+id),vm.errorTranslation=res.data.message})}var vm=this;$filter("orderBy");vm.searchKeyword={idiom:"",derivation:""},$scope.remove=function(id){remove(id)},vm.order=function(predicate){vm.reverse=vm.predicate===predicate?!vm.reverse:!1,vm.predicate=predicate},vm.listIdiomTable=new NgTableParams({page:1,count:10,filter:vm.searchKeyword},{total:0,getData:function($defer,params){IdiomsService.query({},function(response){vm.idioms=response,params.filter().idiom||params.filter().derivation?(vm.data=$filter("filter")(vm.idioms,params.filter()),console.log("==params.filter()======="+JSON.stringify(params.filter())),console.log("==vm.searchKeyword======="+JSON.stringify(vm.searchKeyword)),console.log("==vm.data filter========"+JSON.stringify(vm.data)),params.total(vm.data.length)):(vm.data=vm.idioms.slice((params.page()-1)*params.count(),params.page()*params.count()),params.total(vm.idioms.length)),$defer.resolve(vm.data)})}})}]),function(){function IdiomsService($resource){return $resource("api/idioms/:idiomId",{idiomId:"@id"},{update:{method:"PUT"}})}angular.module("idioms.services").factory("IdiomsService",IdiomsService),IdiomsService.$inject=["$resource"]}(),function(){function TranslationsService($resource){return $resource("api/translations/:translationId",{translationId:"@id"},{update:{method:"PUT"}},{get:{method:"GET",isArray:!0}})}function TranslationsByIdiomService($resource){return $resource("api/getTranslationsByIdiom/:idiomId",{idiomId:"@idiomId"},{update:{method:"PUT"}},{get:{method:"GET",isArray:!0}})}angular.module("translations.services").factory("TranslationsService",TranslationsService).factory("TranslationsByIdiomService",TranslationsByIdiomService),TranslationsService.$inject=["$resource"],TranslationsByIdiomService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/users.client.view.html"})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("RolesController",["Authentication","$http","$location","$modalInstance","$rootScope","$scope","_","user",function(Authentication,$http,$location,$modalInstance,$rootScope,$scope,_,user){$scope.user=user,$scope.dismiss=function(){$modalInstance.dismiss(!0)},$scope.getRoles=function(){$http({url:"api/users/roles",method:"GET"}).success(function(data){console.log(data),$scope.roles=data})},$scope.isChecked=function(roleId){var rolesArray=[];return _.each(user.Roles,function(Role){rolesArray.push(Role.id)}),-1!==rolesArray.indexOf(roleId)?!0:void 0},$scope.update=function(roleId){var rolesArray=[];if(_.each(user.Roles,function(Role){rolesArray.push(Role.id)}),-1===rolesArray.indexOf(roleId))rolesArray.push(roleId);else{var index=rolesArray.indexOf(roleId);rolesArray.splice(index,1)}var params={roles:rolesArray};$http({url:"api/users/admin/"+user.id,method:"PUT",params:params}).success(function(data){$rootScope.$emit("rolesUpdate"),user=data})},$scope.init=function(){$scope.getRoles()}}]),angular.module("users").controller("UsersController",["Authentication","Users","moment","_","$http","$rootScope","$scope","$stateParams","$location","$modal",function(Authentication,Users,moment,_,$http,$rootScope,$scope,$stateParams,$location,$modal){if($scope.authentication=Authentication,$scope.authentication.user){var roles=$scope.authentication.user.roles;_.includes(roles,"admin")?$scope.authenticated=!0:$location.path("/")}else $location.path("/authentication/signin");$scope.find=function(){var limit=$scope.pageSize,offset=($scope.currentPage-1)*$scope.pageSize,search=$scope.search,params={limit:limit,offset:offset,search:search};$http({url:"api/users/admin",method:"GET",params:params}).success(function(data){$scope.totalItems=data.count,$scope.users=data.rows,$scope.numberOfPages=Math.ceil($scope.totalItems/$scope.pageSize),0!==$scope.numberOfPages&&$scope.currentPage>$scope.numberOfPages&&($scope.currentPage=$scope.numberOfPages);var beginning=$scope.pageSize*$scope.currentPage-$scope.pageSize,end=$scope.pageSize*$scope.currentPage>$scope.totalItems?$scope.totalItems:$scope.pageSize*$scope.currentPage;$scope.pageRange=beginning+" ~ "+end})},$scope.remove=function(user){if(console.log(user),user){$http({url:"api/users/admin/"+user.id,method:"DELETE"}).success(function(data){console.log(data)});for(var i in $scope.users)$scope.users[i]===user&&$scope.users.splice(i,1)}else $scope.user.$remove(function(){$location.path("users")})},$scope.changeSearch=function(){$scope.userForm.$setPristine(),$scope.find()},$scope.pageSizes=[1,5,10],$scope.currentPage=1,$scope.pageSize=$scope.pageSizes[1],$scope.changePage=function(){angular.isNumber($scope.currentPage)||($scope.currentPage=1),""===$scope.currentPage?$scope.currentPage=1:$scope.currentPage>$scope.numberOfPages&&($scope.currentPage=$scope.numberOfPages),$scope.paginationForm.$setPristine(),$scope.find()},$scope.changeSize=function(){$scope.paginationForm.$setPristine(),$scope.currentPage=1,$scope.find()},$scope.clickFastBackward=function(){1!==$scope.currentPage&&($scope.currentPage=1,$scope.find())},$scope.clickBackward=function(){1!==$scope.currentPage&&($scope.currentPage--,$scope.find())},$scope.clickForward=function(){$scope.currentPage!==$scope.numberOfPages&&0!==$scope.numberOfPages&&($scope.currentPage++,$scope.find())},$scope.clickFastForward=function(){$scope.currentPage!==$scope.numberOfPages&&0!==$scope.numberOfPages&&($scope.currentPage=$scope.numberOfPages,$scope.find())},$scope.init=function(){$scope.authenticated&&$scope.find()},$scope.openRolesModal=function(index,size){var user=$scope.users[index];$modal.open({templateUrl:"roles-modal.html",controller:"RolesController",size:size,resolve:{user:function(){return user}}})},$rootScope.$on("rolesUpdate",function(event){$scope.init()})}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){
$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){owaspPasswordStrengthTest.config({allowPassphrases:!1,maxLength:128,minLength:4,minPhraseLength:4,minOptionalTestsToPass:1});var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 4 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);